---
import Date from "../components/Date.astro";
import Typography from "../components/Typography.astro";
import { EVENT_TIMESTAMP } from "../consts/event-date";
---
<div class="flex flex-row">
  <Date
    dateType="DÃ­as"
    attribute={{ "data-days": "" }}
    position="col-span-3"
    className="text-xl text-accent md:text-[20rem]"
    wrapperClassName="my-8 md:my-0 md:-mt-16"
    height={"h-[3.80rem] md:h-[20rem]"}
    max={129}
  />

  <Date
    wrapperClassName="my-8"
    dateType="Horas"
    attribute={{ "data-hours": "" }}
    className="text-7xl text-accent"
    height={"h-[3.80rem]"}
    max={23}
  />

  <Date
    wrapperClassName="my-8"
    dateType="Minutos"
    attribute={{ "data-minutes": "" }}
    className="text-7xl text-accent"
    height={"h-[3.80rem]"}
    max={59}
  />

  <Date
    wrapperClassName="my-8"
    dateType="Segundos"
    attribute={{ "data-seconds": "" }}
    className="text-7xl text-accent"
    height={"h-[3.80rem]"}
    max={59}
  />
</div>
<script>
  import createCountdown from "../lib/countdown";
  import { $ } from "../lib/dom-selector";

  function initCountdown() {
    const $countdown = $("[data-date]");
    if (!$countdown) return;

    const $days = {
      firstDigit: $("[data-days] [data-first-group]", $countdown),
      secondDigit: $("[data-days] [data-second-group]", $countdown),
      thirdDigit: $("[data-days] [data-third-group]", $countdown),
    };
    const $hours = {
      firstDigit: $("[data-hours] [data-first-group]", $countdown),
      secondDigit: $("[data-hours] [data-second-group]", $countdown),
    };
    const $minutes = {
      firstDigit: $("[data-minutes] [data-first-group]", $countdown),
      secondDigit: $("[data-minutes] [data-second-group]", $countdown),
    };
    const $seconds = {
      firstDigit: $("[data-seconds] [data-first-group]", $countdown),
      secondDigit: $("[data-seconds] [data-second-group]", $countdown),
    };
    const timestamp = Number($countdown?.getAttribute("data-date") ?? 0);
    const countdown = createCountdown(timestamp, {
      onTick({ days, hours, minutes, seconds }) {
        if (
          $days.firstDigit instanceof HTMLElement &&
          $days.secondDigit instanceof HTMLElement &&
          $days.thirdDigit instanceof HTMLElement
        ) {
          animateDigit($days.firstDigit, days[0]);
          animateDigit($days.secondDigit, days[1]);
          animateDigit($days.thirdDigit, days[2]);
        }

        if (
          $hours.firstDigit instanceof HTMLElement &&
          $hours.secondDigit instanceof HTMLElement
        ) {
          animateDigit($hours.firstDigit, hours[0]);
          animateDigit($hours.secondDigit, hours[1]);
        }

        if (
          $minutes.firstDigit instanceof HTMLElement &&
          $minutes.secondDigit instanceof HTMLElement
        ) {
          animateDigit($minutes.firstDigit, minutes[0]);
          animateDigit($minutes.secondDigit, minutes[1]);
        }

        if (
          $seconds.firstDigit instanceof HTMLElement &&
          $seconds.secondDigit instanceof HTMLElement
        ) {
          animateDigit($seconds.firstDigit, seconds[0]);
          animateDigit($seconds.secondDigit, seconds[1]);
        }
      },

      onComplete() {
        $(".countdown-text")?.remove();

        if (!$countdown) return;

        $countdown.innerHTML = "Â¡El evento de presentaciÃ³n ha empezado! ðŸŽ‰";
        $countdown.className =
          "text-primary uppercase font-semibold animate-fade-in text-3xl text-center";
      },
    });

    return countdown;
  }

  function animateDigit(group: HTMLElement, value: string) {
    const wrapper = $("[data-wrapper]", group);
    const num = $(`[data-num="${value}"]`, group);
    const xnum = $("[data-num-x0]", group);

    if (
      wrapper instanceof HTMLElement &&
      num instanceof HTMLElement &&
      xnum instanceof HTMLElement
    ) {
      wrapper.style.transform = `translateY(-${num.offsetTop}px)`;
      if (value === "0") {
        setTimeout(() => {
          wrapper.classList.toggle("duration-[800ms]", false);
          wrapper.classList.toggle("transition-transform", false);
          wrapper.style.transform = `translateY(-${xnum.offsetTop}px)`;
        }, 800);
      } else {
        wrapper.classList.toggle("duration-[800ms]", true);
        wrapper.classList.toggle("transition-transform", true);
      }
    }
  }

  document.addEventListener("astro:page-load", () => {
    const countdown = initCountdown();
    countdown && countdown.start();
  });
</script>
